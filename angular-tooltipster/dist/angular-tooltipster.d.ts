// Generated by dts-bundle v0.3.0

declare module 'angular-tooltipster' {
    export * from "__angular-tooltipster/tooltip.const";
    export * from "__angular-tooltipster/tooltip.service";
    export * from "__angular-tooltipster/tooltip.model";
}

declare module '__angular-tooltipster/tooltip.const' {
    export class TooltipsConsts {
        moduleName: string;
    }
    export var consts: TooltipsConsts;
}

declare module '__angular-tooltipster/tooltip.service' {
    import { ITooltipOpenOptions, ITooltipShowOnceOptions } from "__angular-tooltipster/tooltip.model";
    import { ITooltipProvider } from "__angular-tooltipster/tooltip.provider";
    import { ILoggerFactory } from "__angular-tooltipster/_core/logger/logger.service";
    import TooltipsterInstance = JQueryTooltipster.ITooltipsterInstance;
    export class TooltipService {
        static id: string;
        constructor(loggerFactory: ILoggerFactory, $rootScope: ng.IRootScopeService, $compile: ng.ICompileService, $translate: ng.translate.ITranslateService, tooltip: ITooltipProvider);
        /**
         * Attaches the tooltip component to the element.
         * @param {ITooltipOpenOptions} options
         * @returns
         */
        attach(options: ITooltipOpenOptions): TooltipsterInstance;
        /**
         * Show tooltip once and auto destroy.
         * @param {ITooltipShowOnceOptions} options
         * @returns
         */
        showOnce(options: ITooltipShowOnceOptions): TooltipsterInstance;
    }
}

declare module '__angular-tooltipster/tooltip.model' {
    export enum TooltipPosition {
            Top = 0,
            Left = 1,
            Right = 2,
            Bottom = 3,
    }
    export enum TooltipSize {
            Tiny = 0,
            Small = 1,
            Medium = 2,
            Large = 3,
    }
    export interface ITooltipCommonOptions {
            /**
                        * Target element which the tooltip gets attached to.
                        */
            targetElement: ng.IAugmentedJQuery | JQuery;
            /**
                        * Content which gets displayed within the tooltip. Can also be a translation key.
                        */
            content: string;
            /**
                        * Indicates that the content should be HTML.
                        */
            contentAsHtml?: boolean;
            /**
                        * Position where it gets displayed eg. 'left', 'right', 'buttom', 'top', 'top-right' etc...
                        */
            position?: TooltipPosition | string;
            /**
                        * Delay how long it takes (in milliseconds) for the tooltip to start animating in.
                        */
            delay?: number;
            /**
                        * Set the speed of the animation.
                        */
            speed?: number;
            /**
                        * Theme CSS class which gets attached with the tooltip.
                        */
            theme?: string;
            minWidth?: number;
            maxWidth?: number;
            /**
                        * Allows you to put multiple tooltips on a single element. Read further instructions down this page. Default: false.
                        */
            multiple?: boolean;
            /**
                        * Create a custom function to be fired only once at instantiation. If the function returns a value, this value will become the content of the tooltip.
                        * @param origin
                        * @param content
                        * @returns
                        */
            onInit?: (origin: JQuery, content: string) => void;
            /**
                        * Create a custom function to be fired before the tooltip opens. This function may prevent or hold off the opening.
                        * @param origin
                        * @param continueTooltip
                        * @returns
                        */
            onBeforeOpen?: (origin: JQuery, continueTooltip: () => void) => void;
            /**
                        * Create a custom function to be fired when the tooltip and its contents have been added to the DOM
                        * @param origin
                        * @param tooltip
                        * @returns
                        */
            onReady?: (origin: JQuery, tooltip: JQuery) => void;
            /**
                        * Create a custom function to be fired once the tooltip has been closed and removed from the DOM
                        * @param origin
                        * @returns
                        */
            onClosed?: (origin: JQuery) => void;
            /****** Custom Params ******/
            /**
                        * Additional css class which gets attached with the tooltip.
                        */
            cssClass?: string;
            /**
                        * Size of the tooltip.
                        */
            size?: TooltipSize | string;
            /**
                        * Determine whether content will be fetched from translation.
                        */
            useTranslate?: boolean;
            /**
                        * Translation data for content to interpolate.
                        */
            translateData?: any;
    }
    export interface ITooltipShowOnceOptions extends ITooltipCommonOptions {
            /**
                        * Specify duration (in milliseconds) after which it gets auto-destroyed. Set to 0 to remain without duration.
                        */
            duration?: number;
    }
    export interface ITooltipOpenOptions extends ITooltipCommonOptions {
            /**
                        * Set how tooltips should be actived and closed e.g. hover, click, etc...
                        */
            trigger?: string;
            /**
                        * Specify if a title attribute should be restored on the HTML element after a call to the 'destroy'.
                        * Possible values: 'none, 'previous' or 'current'
                        */
            restoration?: string;
            /**
                        * How long the tooltip should be allowed to live before closing.
                        */
            timer?: number;
    }
    /**
        * Default options for the tooltip.
        */
    export interface ITooltipDefaultOptions extends JQueryTooltipster.ITooltipsterOptions {
            /**
                        * Determine whether by default uses translate.
                        */
            useTranslate?: boolean;
            /**
                        * Default size of the tooltip.
                        */
            size?: string;
            /**
                        * Default duration for showOnce.
                        */
            showOnceDuration?: number;
            /**
                        * Default theme for showOnce.
                        */
            showOnceTheme?: string;
            /**
                        * Default 'multiple' for showOnce, this will allow multiple tooltips on the same tooltip before its closed.
                        */
            showOnceMultiple?: boolean;
    }
}

declare module '__angular-tooltipster/tooltip.provider' {
    import { ITooltipDefaultOptions } from "__angular-tooltipster/tooltip.model";
    export interface ITooltipProvider {
        defaults: ITooltipDefaultOptions;
        setDefaults(newDefaults: ITooltipDefaultOptions): void;
    }
    export class TooltipProvider implements ng.IServiceProvider {
        static id: string;
        $get(): ITooltipProvider;
        /**
         * Get default options.
         */
        defaults: ITooltipDefaultOptions;
        /**
         * Set default options.
         * @param {ITooltipDefaultOptions} newDefaults
         * @returns
         */
        setDefaults(newDefaults: ITooltipDefaultOptions): void;
    }
}

declare module '__angular-tooltipster/_core/logger/logger.service' {
    export const enum LogType {
        Debug = 0,
        Info = 1,
        Warning = 2,
        Error = 3,
        Success = 4,
    }
    export interface ILog {
        debug(source: string, message?: string, data?: any): void;
        info(source: string, message?: string, data?: any): void;
        error(source: string, message?: string, data?: any): void;
        warn(source: string, message?: string, data?: any): void;
    }
    export interface ILoggerService {
        log(logType: LogType, message: string, data?: any): void;
    }
    export class LoggerService implements ILoggerService {
        static id: string;
        constructor($log: ng.ILogService);
        log(logType: LogType, message: string, data?: any): void;
    }
    export class Logger implements ILog {
        constructor(sourceId: string, loggerService: ILoggerService);
        debug(source: string, message?: string, data?: any): void;
        info(source: string, message?: string, data?: any): void;
        error(source: string, message?: string, data?: any): void;
        warn(source: string, message?: string, data?: any): void;
    }
    export interface ILoggerFactory {
        (sourceId: string): ILog;
    }
    export interface ILoggerFactoryProvider extends ng.IServiceProvider {
    }
}

